; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=amdgcn-amd-amdhsa -mcpu=gfx906 -verify-machineinstrs | FileCheck %s

; CHECK-LABEL: kernel:                                 ; @kernel
; CHECK-NEXT: ; %bb.0:                                ; %entry
; CHECK-NEXT:         s_load_dword s1, s[4:5], 0x10
; CHECK-NEXT:         s_load_dword s0, s[4:5], 0x0
; CHECK-NEXT:         s_waitcnt lgkmcnt(0)
; CHECK-NEXT:         s_cmpk_lg_i32 s1, 0x100
; CHECK-NEXT:         s_cbranch_scc1 .LBB0_3
; CHECK-NEXT: ; %bb.1:                                ; %if.then
; CHECK-NEXT:         s_cmp_eq_u32 s0, 0
; CHECK-NEXT:         s_cbranch_scc1 .LBB0_5
; CHECK-NEXT: ; %bb.2:                                ; %cond.false
; CHECK-NEXT:         s_trap 2
; CHECK-NEXT: .LBB0_3:                                ; %if.else
; CHECK-NEXT:         v_cmp_gt_u32_e32 vcc, 10, v0
; CHECK-NEXT:         s_and_saveexec_b64 s[2:3], vcc
; CHECK-NEXT:         s_cbranch_execz .LBB0_6
; CHECK-NEXT: ; %bb.4:                                ; %if.then3
; CHECK-NEXT:         s_cmp_eq_u32 s0, 0
; CHECK-NEXT:         s_cbranch_scc0 .LBB0_7
; CHECK-NEXT: .LBB0_5:                                ; %if.end6.sink.split
; CHECK-NEXT:         s_load_dwordx2 s[2:3], s[4:5], 0x8
; CHECK-NEXT:         v_lshlrev_b32_e32 v0, 2, v0
; CHECK-NEXT:         v_mov_b32_e32 v1, s0
; CHECK-NEXT:         s_waitcnt lgkmcnt(0)
; CHECK-NEXT:         global_store_dword v0, v1, s[2:3]
; CHECK-NEXT: .LBB0_6:                                ; %UnifiedReturnBlock
; CHECK-NEXT:         s_endpgm
; CHECK-NEXT: .LBB0_7:                                ; %cond.false.i8
; CHECK-NEXT:         s_trap 2
; CHECK-NEXT:         ; divergent unreachable
; CHECK-NEXT:         s_endpgm

declare void @llvm.trap()
declare i32 @llvm.amdgcn.workitem.id.x()

define amdgpu_kernel void @kernel(i32 %a, i32 addrspace(1)* %x, i32 noundef %n) {
entry:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %cmp = icmp eq i32 %n, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:
  %cmp1 = icmp eq i32 %a, 0
  br i1 %cmp1, label %if.end6.sink.split, label %cond.false

cond.false:
  call void @llvm.trap()
  unreachable

if.else:
  %cmp2 = icmp ult i32 %tid, 10
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:
  %cmp1.i7 = icmp eq i32 %a, 0
  br i1 %cmp1.i7, label %if.end6.sink.split, label %cond.false.i8

cond.false.i8:
  call void @llvm.trap()
  unreachable

if.end6.sink.split:
  %x1 = getelementptr inbounds i32, i32 addrspace(1)* %x, i32 %tid
  store i32 %a, i32 addrspace(1)* %x1, align 4
  br label %if.end6

if.end6:
  ret void
}
